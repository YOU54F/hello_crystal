HELLO_TASK_TEMPLATE: &HELLO_TASK_TEMPLATE
  hello_script: |
    APP_NAME=hello
    if [[ $IMAGE == "crystal" || $IMAGE == "crystal-rosetta" ]]; then
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    else
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD"
    fi
    file $APP_NAME
    du -hs $APP_NAME
    strip -S "$APP_NAME"
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    ./$APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
FETCH_FFI_TASK_TEMPLATE: &FETCH_FFI_TASK_TEMPLATE
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    if [[ $IMAGE == "crystal" || $IMAGE == "crystal-rosetta" ]]; then
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    else
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -I$PWD/include"
    fi
    file $APP_NAME
    du -hs $APP_NAME
    strip -S $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    ./$APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
    # otool -L libpact_ffi.dylib
    du -hs libpact_ffi.a
    strip -S libpact_ffi.a
    du -hs libpact_ffi.a
FFI_TASK_TEMPLATE: &FFI_TASK_TEMPLATE
  ffi_script: |
    APP_NAME=ffi
    if [[ $IMAGE == "crystal" || $IMAGE == "crystal-rosetta" ]]; then
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include -framework CoreFoundation -framework IOKit -framework Security"
    else
      $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -I$PWD/include -framework CoreFoundation -framework IOKit -framework Security"
    fi
    rm -f libpact_ffi.a
    file $APP_NAME
    du -hs $APP_NAME
    strip -S $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && EXTRA_LIBS=libpact_ffi.dylib ./check_dynamic_linking.sh $APP_NAME
    ./$APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
INSTALL_BREW_TEMPLATE: &INSTALL_BREW_TEMPLATE
  brew_setup_script: |
    if [[ "$IMAGE" =~ vanilla ]]; then
      NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      echo HOMEBREW_PREFIX="${USER_LIB_DIR:-/opt/homebrew}" >> $CIRRUS_ENV
      echo HOMEBREW_CELLAR="${USER_LIB_DIR:-/opt/homebrew}/Cellar" >> $CIRRUS_ENV
      echo HOMEBREW_REPOSITORY="${USER_LIB_DIR:-/opt/homebrew}" >> $CIRRUS_ENV
      echo PATH="${USER_LIB_DIR:-/opt/homebrew}/bin:${USER_LIB_DIR:-/opt/homebrew}/sbin:${PATH}" >> $CIRRUS_ENV
      echo MANPATH="${USER_LIB_DIR:-/opt/homebrew}/share/man$:{MANPATH}" >> $CIRRUS_ENV
      echo INFOPATH="${USER_LIB_DIR:-/opt/homebrew}/share/info:${INFOPATH}" >> $CIRRUS_ENV
      brew install ${USER_LIB_DIR:-/opt/homebrew}/bin/brew install gh
    fi
INSTALL_ROSETTA_TEMPLATE: &INSTALL_ROSETTA_TEMPLATE
  rosetta_script: |
    if ! [[ "$IMAGE" =~ ^(crystal|crystal-rosetta)$ ]]; then
      softwareupdate --install-rosetta --agree-to-license
    fi
INSTALL_CRYSTAL_BREW_TEMPLATE: &INSTALL_CRYSTAL_BREW_TEMPLATE
  crystal_install_script: |
    if ! [[ "$IMAGE" =~ ^(crystal|crystal-rosetta)$ ]]; then
      if [[ "$USE_ROSETTA" == "arch -x86_64" ]]; then
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 $USE_ROSETTA brew install crystal gh
      else
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install crystal
      fi
      crystal --version
    fi
MAKE_STATIC_LIBS_TEMPLATE: &MAKE_STATIC_LIBS_TEMPLATE
  crystal_static_libs_script: |
    if ! [[ "$IMAGE" =~ ^(crystal|crystal-rosetta)$ ]]; then
      # $USE_ROSETTA make libs
      gh release download --repo you54f/hello_crystal -p "*$($USE_ROSETTA uname -m)-static-libs*"
      tar -xzvf crystal-Darwin-$($USE_ROSETTA uname -m)-static-libs.tar.gz
      ls
      pwd
    fi
PKG_STATIC_LIBS_TEMPLATE: &PKG_STATIC_LIBS_TEMPLATE
  package_static_libs_script: |
    if [[ "$IMAGE" =~ ^(crystal|crystal-rosetta)$ ]]; then
      export WORK_DIR=$PWD
      cd /Users/Admin/hello_crystal
      tar -czvf crystal-$(uname -s)-$($USE_ROSETTA uname -m)-static-libs.tar.gz *.a include/
      mkdir -p $WORK_DIR/pkg
      mv crystal-$(uname -s)-$($USE_ROSETTA uname -m)-static-libs.tar.gz $WORK_DIR/pkg
    fi
INSTALL_CRYSTAL_MACOS_SOURCE_TEMPLATE: &INSTALL_CRYSTAL_MACOS_SOURCE_TEMPLATE
  crystal_install_script: |
    curl -L https://github.com/crystal-lang/crystal/releases/download/1.9.2/crystal-1.9.2-1-darwin-universal.tar.gz | tar xz
    mv crystal-1.9.2-1 ~/crystal
    chmod +x ~/crystal/bin/crystal
    ~/crystal/bin/crystal --version
    file ~/crystal/bin/crystal
    file ~/crystal/embedded/bin/crystal
    echo PATH=$PATH:~/crystal/bin >> $CIRRUS_ENV

macos_build_task:
  # only_if: $CIRRUS_CHANGE_TITLE =~ 'build\(macos_arm_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'build\(bin\).*'
  env: 
    matrix:
     - IMAGE: ghcr.io/cirruslabs/macos-ventura-base:latest
    #  - IMAGE: crystal
    #  - IMAGE: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
  macos_instance:
    image: $IMAGE
  <<: *INSTALL_BREW_TEMPLATE
  # <<: *INSTALL_CRYSTAL_BREW_TEMPLATE
  <<: *INSTALL_CRYSTAL_MACOS_SOURCE_TEMPLATE
  <<: *MAKE_STATIC_LIBS_TEMPLATE
  <<: *PKG_STATIC_LIBS_TEMPLATE
  <<: *HELLO_TASK_TEMPLATE
  <<: *FETCH_FFI_TASK_TEMPLATE
  <<: *FFI_TASK_TEMPLATE
  binary_artifacts:
    path: "pkg/*"

macos_rosetta_build_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'build\(macos_rosetta_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'build\(bin\).*'
  env: 
    USE_ROSETTA: arch -x86_64
    matrix:
     - IMAGE: ghcr.io/cirruslabs/macos-ventura-base:latest
    #  - IMAGE: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
    #  - IMAGE: crystal-rosetta
  macos_instance:
    image: $IMAGE
  <<: *INSTALL_BREW_TEMPLATE
  <<: *INSTALL_ROSETTA_TEMPLATE
  <<: *INSTALL_CRYSTAL_MACOS_SOURCE_TEMPLATE
  <<: *MAKE_STATIC_LIBS_TEMPLATE
  <<: *PKG_STATIC_LIBS_TEMPLATE
  <<: *HELLO_TASK_TEMPLATE
  <<: *FETCH_FFI_TASK_TEMPLATE
  <<: *FFI_TASK_TEMPLATE
  binary_artifacts:
    path: "pkg/*"

macos_test_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(macos_arm_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'test\(bin\).*'
  macos_instance:
    matrix:
      - image: ghcr.io/cirruslabs/macos-sonoma-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-monterey-vanilla:latest
  bin_script: |
    find tmp/macos_build/binary/pkg -type f | xargs chmod +x
    mv tmp/macos_build/binary/pkg/* .
  hello_script: |
    APP_NAME=hello
    ./$APP_NAME
  ffi_script: |
    APP_NAME=ffi
    ./$APP_NAME
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    ./$APP_NAME

macos_rosetta_test_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(macos_rosetta_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'test\(bin\).*'
  macos_instance:
    matrix:
      - image: ghcr.io/cirruslabs/macos-sonoma-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-monterey-vanilla:latest
  env:
    USE_ROSETTA: arch -x86_64
  <<: *INSTALL_ROSETTA_TEMPLATE
  bin_script: |
    find tmp/macos_rosetta_build/binary/pkg -type f | xargs chmod +x
    mv tmp/macos_rosetta_build/binary/pkg/* .
  hello_script: |
    APP_NAME=hello
    $USE_ROSETTA ./$APP_NAME
  ffi_script: |
    APP_NAME=ffi
    $USE_ROSETTA ./$APP_NAME
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    $USE_ROSETTA ./$APP_NAME

ALPINE_CI_TASKS: &ALPINE_CI_TASKS
  uname_script: |
    uname -a
  deps_script: |
    apk add file
  test_script: |
    APP_NAME=hello
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    ldd /home/$APP_NAME || echo "not dynamically linked, or not found"
    ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  test_fetch_ffi_script: |
    APP_NAME=fetch_ffi
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    ldd /home/$APP_NAME || echo "not dynamically linked, or not found"
    ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  test_ffi_script: |
    APP_NAME=ffi
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    LD_LIBRARY_PATH=/home ldd /home/$APP_NAME || echo "not dynamically linked, or not found"
    # LD_LIBRARY_PATH=/home ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    ls
    ls /home
    LD_LIBRARY_PATH=/home /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  binary_artifacts:
    path: "pkg/*"

linux_arm_task:
  arm_container:
    dockerfile: Dockerfile
    docker_arguments:
      IMAGE: 84codes/crystal:latest
      ARCH: arm64
  <<: *ALPINE_CI_TASKS

linux_amd_task:
  container:
    dockerfile: Dockerfile
    docker_arguments:
      IMAGE: 84codes/crystal:latest
      ARCH: amd64
      # IMAGE: crystallang/crystal:latest-alpine
  <<: *ALPINE_CI_TASKS

# ========================================
# Standalone Testing Tasks against GH releases
# ========================================

DOCKER_MATRIX: &DOCKER_MATRIX
  - image: debian:latest
  - image: node:20-slim
  - image: debian:bookworm-slim
  - image: bitnami/minideb:latest
  # - image: busybox:glibc
  # - image: busybox:uclibc
  # - image: busybox:musl
  - image: centos:centos8
  - image: centos:centos7
  - image: quay.io/centos/centos:stream
  - image: quay.io/centos/centos:stream9
  - image: quay.io/centos/centos:stream9-minimal
  - image: quay.io/centos/centos:stream8
  - image: quay.io/centos/centos:8
  - image: alpine:latest
  - image: alpine:3.18
  - image: alpine:3.17
  - image: alpine:3.16
  - image: alpine:3.15
  # - image: ubuntu:latest
  # - image: ubuntu:20.04
  # - image: ubuntu:18.04
  # - image: ubuntu:16.04
  - image: fedora:latest
  - image: fedora:34
  - image: fedora:33
  - image: fedora:32
  - image: opensuse/leap:latest
  - image: opensuse/leap:15.3
  - image: opensuse/leap:15.2
  - image: opensuse/leap:15.1
  - image: opensuse/leap:15.0
  # - image: raspbian/stretch

linux_arm_test_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(linux_arm_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'test\(bin\).*'
  env:
    matrix:
      <<: *DOCKER_MATRIX
  arm_container:
    image: $image
  deps_script: |
    apt-get -y update && apt-get -y install ca-certificates || true
    # apk add file || true
  test_script: |
    mv tmp/linux_arm/binary/pkg/* .
    APP_NAME=hello
    chmod +x $APP_NAME
    ./$APP_NAME
  # fetch_ffi_script: |
  #   APP_NAME=fetch_ffi
  #   chmod +x $APP_NAME
  #   ./$APP_NAME
  ffi_script: |
    ls
    ls /home
    APP_NAME=ffi
    chmod +x $APP_NAME
    ./$APP_NAME
    # LD_LIBRARY_PATH=/home ./$APP_NAME
linux_amd_test_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(linux_amd_bin\).*' || $CIRRUS_CHANGE_TITLE =~ 'test\(bin\).*'
  env:
    matrix:
      <<: *DOCKER_MATRIX
  container: # amd / x86_64
    image: $image
  deps_script: |
    apt-get -y update && apt-get -y install ca-certificates || true
    # apk add file || true
  test_script: |
    mv tmp/linux_amd/binary/pkg/* .
    APP_NAME=hello
    chmod +x $APP_NAME
    ./$APP_NAME
  # fetch_ffi_script: |
  #   APP_NAME=fetch_ffi
  #   chmod +x $APP_NAME
  #   ./$APP_NAME
  ffi_script: |
    ls
    ls /home
    APP_NAME=ffi
    chmod +x $APP_NAME
    ./$APP_NAME
    # LD_LIBRARY_PATH=/home ./$APP_NAME