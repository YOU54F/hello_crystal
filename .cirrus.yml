crystal_source_task:
  only_if: $CIRRUS_CHANGE_TITLE =~ 'ci\(crystal_gh_bin\).*'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest 
  crystal_install_script: |
    curl -L https://github.com/crystal-lang/crystal/releases/download/1.9.2/crystal-1.9.2-1-darwin-universal.tar.gz | tar xz
    mv crystal-1.9.2-1 ~/crystal
    chmod +x ~/crystal/bin/crystal
    ~/crystal/bin/crystal --version
    file ~/crystal/bin/crystal
    file ~/crystal/embedded/bin/crystal
    echo PATH=$PATH:~/crystal/bin >> $CIRRUS_ENV
  crystal_check_script: |
    crystal --version
  deps_script: | # homebrew will allow us to install xcode
    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    make libs
  build_script: |
    APP_NAME=hello
    crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD"
    ./$APP_NAME
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -I$PWD/include"
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    SSL_CERT_FILE=/private/etc/ssl/cert.pem ./$APP_NAME

macos_build_task:
  macos_instance:
    # image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
    image: crystal
  # brew_setup_script: |
  #   NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #   echo HOMEBREW_PREFIX="/opt/homebrew" >> $CIRRUS_ENV
  #   echo HOMEBREW_CELLAR="/opt/homebrew/Cellar" >> $CIRRUS_ENV
  #   echo HOMEBREW_REPOSITORY="/opt/homebrew" >> $CIRRUS_ENV
  #   echo PATH="/opt/homebrew/bin:/opt/homebrew/sbin:${PATH}" >> $CIRRUS_ENV
  #   echo MANPATH="/opt/homebrew/share/man$:{MANPATH}" >> $CIRRUS_ENV
  #   echo INFOPATH="/opt/homebrew/share/info:${INFOPATH}" >> $CIRRUS_ENV
  # crystal_install_script: |
  #   brew install crystal
  #   crystal --version
  # crystal_static_libs_script: |
  #   make libs
  # hello_script: |
  #   APP_NAME=hello
  #   # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD"
  #   crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
  #   ./$APP_NAME
  #   file $APP_NAME
  #   du -hs $APP_NAME
  #   otool -L $APP_NAME
  #   chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
  #   mkdir -p pkg
  #   mv $APP_NAME pkg
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -I$PWD/include"
    crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    SSL_CERT_FILE=/private/etc/ssl/cert.pem ./$APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
    # otool -L libpact_ffi.dylib
    file libpact_ffi.a
    # rm libpact_ffi.dylib
  ffi_script: |
    APP_NAME=ffi
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD  -framework CoreFoundation -framework IOKit -framework Security"
    crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include -framework CoreFoundation -framework IOKit -framework Security"
    ./$APP_NAME
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && EXTRA_LIBS=libpact_ffi.dylib ./check_dynamic_linking.sh $APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
  binary_artifacts:
    path: "pkg/*"

macos_rosetta_build_task:
  macos_instance:
    # image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
    image: crystal-rosetta
  env:
    USE_ROSETTA: arch -x86_64
  # rosetta_script: |
  #   softwareupdate --install-rosetta --agree-to-license
  # brew_setup_script: |
  #   NONINTERACTIVE=1 $USE_ROSETTA /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #   echo HOMEBREW_PREFIX="/usr/local/homebrew" >> $CIRRUS_ENV
  #   echo HOMEBREW_CELLAR="/usr/local/homebrew/Cellar" >> $CIRRUS_ENV
  #   echo HOMEBREW_REPOSITORY="/usr/local/homebrew" >> $CIRRUS_ENV
  #   echo PATH="/usr/local/homebrew/bin:/usr/local/homebrew/sbin:${PATH}" >> $CIRRUS_ENV
  #   echo MANPATH="/usr/local/homebrew/share/man$:{MANPATH}" >> $CIRRUS_ENV
  #   echo INFOPATH="/usr/local/homebrew/share/info:${INFOPATH}" >> $CIRRUS_ENV
  # crystal_install_script: |
  #   brew install crystal
  #   crystal --version
  # crystal_static_libs_script: |
  #   $USE_ROSETTA make libs
  hello_script: |
    APP_NAME=hello
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD"
    $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    ./$APP_NAME
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
  fetch_ffi_script: |
    APP_NAME=fetch_ffi
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -I$PWD/include"
    $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include"
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && ./check_dynamic_linking.sh $APP_NAME
    SSL_CERT_FILE=/private/etc/ssl/cert.pem ./$APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
    # otool -L libpact_ffi.dylib
    file libpact_ffi.a
    # rm libpact_ffi.dylib
  ffi_script: |
    APP_NAME=ffi
    # crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD  -framework CoreFoundation -framework IOKit -framework Security"
    $USE_ROSETTA crystal build --release bin/$APP_NAME.cr --no-debug --link-flags="-L$PWD -L/Users/Admin/hello_crystal -I/Users/Admin/hello_crystal/include -framework CoreFoundation -framework IOKit -framework Security"
    ./$APP_NAME
    file $APP_NAME
    du -hs $APP_NAME
    otool -L $APP_NAME
    chmod +x check_dynamic_linking.sh && EXTRA_LIBS=libpact_ffi.dylib ./check_dynamic_linking.sh $APP_NAME
    mkdir -p pkg
    mv $APP_NAME pkg
  binary_artifacts:
    path: "pkg/*"

macos_test_task:
  macos_instance:
    matrix:
      - image: crystal
      - image: ghcr.io/cirruslabs/macos-sonoma-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-ventura-vanilla:latest
      - image: ghcr.io/cirruslabs/macos-monterey-vanilla:latest
  bin_script: |
    find tmp/macos_build/binary/pkg -type f | xargs chmod +x
    mv tmp/macos_build/binary/pkg/* .
  hello_script: |
    APP_NAME=hello
    ./$APP_NAME
  # fetch_ffi_script: |
  #   APP_NAME=fetch_ffi
  #   SSL_CERT_FILE=/private/etc/ssl/cert.pem ./$APP_NAME
  ffi_script: |
    APP_NAME=ffi
    ./$APP_NAME


ALPINE_CI_TASKS: &ALPINE_CI_TASKS
  uname_script: |
    uname -a
  deps_script: |
    apk add file
  test_script: |
    APP_NAME=hello
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    ldd /home/$APP_NAME ||  echo "not dynamically linked, or not found"
    ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  test_fetch_ffi_script: |
    APP_NAME=fetch_ffi
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    ldd /home/$APP_NAME ||  echo "not dynamically linked, or not found"
    ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  test_ffi_script: |
    APP_NAME=ffi
    file /home/$APP_NAME
    du -hs /home/$APP_NAME
    LD_LIBRARY_PATH=/home ldd /home/$APP_NAME ||  echo "not dynamically linked, or not found"
    # LD_LIBRARY_PATH=/home ldd /home/$APP_NAME 2>&1 | grep -q 'Not a valid dynamic program'
    ls
    ls /home
    LD_LIBRARY_PATH=/home /home/$APP_NAME
    mkdir -p pkg
    mv /home/$APP_NAME pkg
  binary_artifacts:
    path: "pkg/*"

linux_arm_task:
  arm_container:
    dockerfile: Dockerfile.hello
    docker_arguments:
      IMAGE: 84codes/crystal:latest
      ARCH: arm64
  <<: *ALPINE_CI_TASKS

linux_amd_task:
  container:
    dockerfile: Dockerfile.hello
    docker_arguments:
      IMAGE: 84codes/crystal:latest
      ARCH: amd64
      # IMAGE: crystallang/crystal:latest-alpine
  <<: *ALPINE_CI_TASKS

# ========================================
# Standalone Testing Tasks against GH releases
# ========================================

DOCKER_MATRIX: &DOCKER_MATRIX
  - image: debian:latest
  - image: node:20-slim
  - image: debian:bookworm-slim
  - image: bitnami/minideb:latest
  # - image: busybox:glibc
  # - image: busybox:uclibc
  # - image: busybox:musl
  - image: centos:centos8
  - image: centos:centos7
  - image: quay.io/centos/centos:stream
  - image: quay.io/centos/centos:stream9
  - image: quay.io/centos/centos:stream9-minimal
  - image: quay.io/centos/centos:stream8
  - image: quay.io/centos/centos:8
  - image: alpine:latest
  - image: alpine:3.18
  - image: alpine:3.17
  - image: alpine:3.16
  - image: alpine:3.15
  # - image: ubuntu:latest
  # - image: ubuntu:20.04
  # - image: ubuntu:18.04
  # - image: ubuntu:16.04
  - image: fedora:latest
  - image: fedora:34
  - image: fedora:33
  - image: fedora:32
  - image: opensuse/leap:latest
  - image: opensuse/leap:15.3
  - image: opensuse/leap:15.2
  - image: opensuse/leap:15.1
  - image: opensuse/leap:15.0
  # - image: raspbian/stretch

linux_arm_test_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(linux_arm_bin\).*'
  env:
    matrix:
      <<: *DOCKER_MATRIX
  arm_container:
    image: $image
  deps_script: |
    apt-get -y update && apt-get -y install ca-certificates || true
    # apk add file || true
  test_script: |
    mv tmp/linux_arm/binary/pkg/* .
    APP_NAME=hello
    chmod +x $APP_NAME
    ./$APP_NAME
  # fetch_ffi_script: |
  #   APP_NAME=fetch_ffi
  #   chmod +x $APP_NAME
  #   ./$APP_NAME
  ffi_script: |
    ls
    ls /home
    APP_NAME=ffi
    chmod +x $APP_NAME
    ./$APP_NAME
    # LD_LIBRARY_PATH=/home ./$APP_NAME
linux_amd_test_task: 
  only_if: $CIRRUS_CHANGE_TITLE =~ 'test\(linux_amd_bin\).*'
  env:
    matrix:
      <<: *DOCKER_MATRIX
  container: # amd / x86_64
    image: $image
  deps_script: |
    apt-get -y update && apt-get -y install ca-certificates || true
    # apk add file || true
  test_script: |
    mv tmp/linux_amd/binary/pkg/* .
    APP_NAME=hello
    chmod +x $APP_NAME
    ./$APP_NAME
  # fetch_ffi_script: |
  #   APP_NAME=fetch_ffi
  #   chmod +x $APP_NAME
  #   ./$APP_NAME
  ffi_script: |
    ls
    ls /home
    APP_NAME=ffi
    chmod +x $APP_NAME
    ./$APP_NAME
    # LD_LIBRARY_PATH=/home ./$APP_NAME